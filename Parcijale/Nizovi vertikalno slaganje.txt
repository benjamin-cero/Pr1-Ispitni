#include <iostream>
using namespace std;

// Funkcija za generisanje nasumičnog broja u opsegu [1, 20]


// Funkcija za vertikalno slaganje matrica (vstack)
int** vstack(int** M1, int rows1, int cols, int** M2, int rows2) {
    int totalRows = rows1 + rows2;
    int** M3 = new int* [totalRows];

    for (int i = 0; i < totalRows; ++i) {
        M3[i] = new int[cols];
    }

    for (int i = 0; i < rows1; i++)
    {
        for (int j = 0; j < cols; ++j) {
            M3[i][j] = M1[i][j];
        }
    }
    for (int i = 0; i < rows2; ++i) {
        for (int j = 0; j < cols; ++j) {
            M3[rows1 + i][j] = M2[i][j];
        }
    }
    return M3;
}
void main() {
    srand(time(NULL));
    int rows1, cols, rows2;

    cout << "Unesite broj redova i kolona za matricu M1: ";
    cin >> rows1 >> cols;

    int** M1 = new int* [rows1];
    for (int i = 0; i < rows1; ++i) {
        M1[i] = new int[cols];
    }
    for (int i = 0; i < rows1; i++)
    {
            for (int j = 0; j < cols; ++j) {
                M1[i][j] = rand()%20+1;
            }
    }
    // Unos broja redova za matricu M2 (broj kolona isti kao u M1)
    cout << "Unesite broj redova za matricu M2: ";
    cin >> rows2;

    // Dinamička alokacija i popunjavanje matrice M2
    int** M2 = new int* [rows2];
    for (int i = 0; i < rows2; ++i) {
        M2[i] = new int[cols];
    }
    for (int i = 0; i < rows2; i++)
    {
        for (int j = 0; j < cols; ++j) {
            M2[i][j] = rand() % 20 + 1;;
        }
    }
    // Kreiranje matrice M3 pomoću funkcije vstack
    int** M3;
    M3 = vstack(M1, rows1, cols, M2, rows2);

    // Ispis matrica M1, M2 i M3
    cout << "\nMatrica M1:\n";
    for (int i = 0; i < rows1; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << M1[i][j] << " ";
        }
        cout << endl;
    }

    cout << "\nMatrica M2:\n";
    for (int i = 0; i < rows2; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << M2[i][j] << " ";
        }
        cout << endl;
    }

    cout << "\nRezultujuca matrica M3:\n";
    for (int i = 0; i < rows1 + rows2; ++i) {
        for (int j = 0; j < cols; ++j) {
            cout << M3[i][j] << " ";
        }
        cout << endl;
    }

    // Dealokacija memorije
    for (int i = 0; i < rows1; ++i) delete[] M1[i];
    delete[] M1;

    for (int i = 0; i < rows2; ++i) delete[] M2[i];
    delete[] M2;

    for (int i = 0; i < rows1 + rows2; ++i) delete[] M3[i];
    delete[] M3;

    system("pause");
}
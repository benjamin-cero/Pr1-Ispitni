#include <iostream>
#include <iomanip>
#include <ctime>
using namespace std;

/*struct Knjiga
{
    char* imeKnjige = nullptr;
    char* kategorijaKnjige = nullptr;
    char izdavac[40] = "";
    int brojDijelova = 0;
    int brojCitatelja = 0;
    int** ocjene = nullptr;
    
    void unos();
    void ispis();
    void dealokacije();

    };
    float* getAverageByCategory(Knjiga*niz,int velNiza);
    
    Uraditi implementaciju zadanih funkcija clanica kao i globalne funkcije "GetAverageByCategory"
    i po potrebi definirati i implementirati pomocne globalne funkcije. Zatim, u main funkciji ce sljedece stavke:
    -Kreiranje dinamickog niza objekta tipa Knjiga, velicine koju korisnik unese
    -Poziv funkcije clanice unos (funkcije koja radi alokaciju i konzolni unos, paziti na
    kategorije knjige) za sve elemente niza, Unos ocjena mora biti random u vrijednostima 1 do 5
    -Poziv funkciije clanice ispis za sve elemente niza
    -Kreiranje i dohvacanje niza prosjecnih ocjena za sve 3 kategorije
    -Ispis dinamickog niza prosjecnih ocjena za sve 3 kategorije
    -Dealokacija niza prosjecnih ocjena kategorija 
    -Poziv funkcije za dealokaciju
    -Dealokacija dinamickog niza Knjiga
    ZABRANJENO JE KORISTITI UGLASTE ZAGRADE. OBAVEZNO KORISTITI
    ARITMETIKU POKAZIVACA.
    
    
    */





struct Knjiga
{
    char* imeKnjige = nullptr;
    char* kategorijaKnjige = nullptr;
    char izdavac[40] = "";
    int brojDijelova = 0;
    int brojCitatelja = 0;
    int** ocjene = nullptr;

    void unos() {
        imeKnjige = new char[100];
        cout << "Unesite ime knjige: ";
        cin.ignore();
        cin.get(imeKnjige,100);

        kategorijaKnjige = new char[20];
        do
        {
            cout << "Unesite kategoriju (Fiction, Non-Fiction, Mystery): ";
            cin.ignore();
            cin.get(kategorijaKnjige, 20);

        } while (strcmp(kategorijaKnjige,"Fiction")!=0 &&
            strcmp(kategorijaKnjige, "Non-Fiction") != 0&&
            strcmp(kategorijaKnjige, "Mystery") != 0);

        cout << "Unesite izdavaca: ";
        cin.ignore();
        cin.get(izdavac, 40);

        cout << "Unesite broj djelova knjige: ";
        cin >> brojDijelova;
        cout << "Unesite broj citatelja knjige: ";
        cin >> brojCitatelja;

        ocjene = new int* [brojDijelova];
        for (int i = 0; i < brojDijelova; i++)
        {
            *(ocjene+i) = new int[brojCitatelja];
        }

        cout << "Unesite ocjene: ";
        for (int i = 0; i < brojDijelova; i++)
        {
            for (int j = 0; j < brojCitatelja; j++)
            {
                *(*(ocjene + i) + j) = rand()%5+1;
            }
        }
    }
    void ispis() {
        cout << "=================================" << endl;
        cout << "Ime knjige: " << imeKnjige << endl;
        cout << "Kategorija: " << kategorijaKnjige << endl;
        cout << "Izdavac: " << izdavac << endl;
        cout << "Broj dijelova: " << brojDijelova << endl;
        cout << "Broj citatelja: " << brojCitatelja << endl;

        cout << "Ocjene: " << endl;
        for (int i = 0; i < brojDijelova; i++)
        {
            cout << "Dio: " << i + 1 << ": ";
            for (int j = 0; j < brojCitatelja; j++)
            {
                cout << *(*(ocjene + i) + j) << " ";
            }
            cout << endl;
        }

    }

    float prosjek() {
        int suma = 0;
        int brojac = 0;
        for (int i = 0; i < brojDijelova; i++)
        {
            for (int j = 0; j < brojCitatelja; j++)
            {
                suma += *(*(ocjene + i) + j);
                brojac++;
            }
        }
        if (brojac > 0) {
            return float(suma) / brojac;
        }
        else
        {
            return 0;
        }
        // OPCIONALNO return brojac > 0 ? float(suma / brojac) : 0;
    }


    void dealokacija() {
        for (int i = 0; i < brojDijelova; i++)
        {
            delete[] * (ocjene + i);
            *(ocjene + i)=nullptr;
        }
        delete[] ocjene;
        ocjene = nullptr;

        delete[] imeKnjige;
        imeKnjige = nullptr;
        
        delete[] kategorijaKnjige;
        kategorijaKnjige = nullptr;

    }

};


float* getAverageByCategory(Knjiga* book, int velicina) {
    float* prosjeci = new float[3] {};
    int* brojac = new int[3] {};


    for (int i = 0; i < velicina; i++){
        float p = (book + i)->prosjek();
        if (strcmp((book + i)->kategorijaKnjige, "Fiction") == 0) {
            prosjeci[0] += p;
            brojac[0]++;
        }
        else if (strcmp((book + i)->kategorijaKnjige, "Non-Fiction") == 0) {
            prosjeci[1] += p;
            brojac[1]++;
        }
        else if (strcmp((book + i)->kategorijaKnjige, "Mystery") == 0) {
            prosjeci[2] += p;
            brojac[2]++;
        }
    }

    for (int i = 0; i < 3; i++)
    {
        if (brojac[i] > 0) {
            *(prosjeci + i) = *(prosjeci + i) / *(brojac + i);
        }
    }
    delete[]brojac;
    brojac = nullptr;
    return prosjeci;

}

void main() {
    srand(time(NULL));
    int velicina = 0;
    cout << "Unesite broj Knjiga: ";
    cin >> velicina;

    Knjiga* book = new Knjiga[velicina];

    for (int i = 0; i < velicina; i++)
    {
        (book + i)->unos();
    }
    for (int i = 0; i < velicina; i++)
    {
        (book + i)->ispis();
    }
    cout << endl;

    float* prosjeci = getAverageByCategory(book,velicina);
    cout << "\nProsjece ocjene po kategorijama:\n";
    cout << "Fiction: " << *(prosjeci + 0) << endl;
    cout << "Non-Fiction: " << *(prosjeci + 1) << endl;
    cout << fixed << setprecision(2) << endl;
    cout << "Mistery: " << *(prosjeci + 2) << endl;
    delete[] prosjeci;
    prosjeci = nullptr;

    for (int i = 0; i < velicina; i++)
    {
        (book+i)->dealokacija();
    }

    delete[] book;
    book = nullptr;

    system("pause");
}